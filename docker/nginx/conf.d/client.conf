# proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=skynet:10m max_size=10g use_temp_path=off;
# limit_req_zone $binary_remote_addr zone=stats_by_ip:10m rate=10r/m;
# limit_conn_zone $binary_remote_addr zone=uploads_by_ip:10m;
# limit_conn_zone $binary_remote_addr zone=downloads_by_ip:10m;
# limit_req_status 429;
# limit_conn_status 429;

# server {
# 	listen 443 ssl http2;
# 	listen [::]:443 ssl http2;
# 	server_name siasky.dev;

# 	# ddos protection: closing slow connections
# 	client_body_timeout 5s;
# 	client_header_timeout 5s;

# 	# Increase the body buffer size, to ensure the internal POSTs can always
# 	# parse the full POST contents into memory.
# 	client_body_buffer_size 128k;
# 	client_max_body_size 128k;

# 	location / {
# 		root /etc/nginx/html/client; # path to root of index.html
# 	}

# 	location /stats {
# 		proxy_cache skynet;
# 		proxy_cache_valid any 1m; # cache stats for 1 minute

# 		proxy_set_header Access-Control-Allow-Origin: *;
# 		proxy_set_header User-Agent: Sia-Agent;

# 		proxy_pass http://docker-host:9980/skynet/stats;
# 	}

# 	location /skynet/skyfile {
# 		limit_conn uploads_by_ip 10; # ddos protection: max 10 uploads at a time
# 		client_max_body_size 1000M; # make sure to limit the size of upload to a sane value
# 		proxy_read_timeout 600;

# 		# Extract 3 sets of 2 characters from $request_id and assign to $dir1, $dir2, $dir3
# 		# respectfully. The rest of the $request_id is going to be assigned to $dir4.
# 		# We use those variables to automatically generate a unique path for the uploaded file.
# 		# This ensures that not all uploaded files end up in the same directory, which is something
# 		# that causes performance issues in the renter.
# 		# Example path result: /af/24/9b/c5ec894920ccc45634dc9a8065
# 		if ($request_id ~* "(\w{2})(\w{2})(\w{2})(\w+)") {
# 			set $dir1 $1;
# 			set $dir2 $2;
# 			set $dir3 $3;
# 			set $dir4 $4;
# 		}

# 		# proxy this call to siad endpoint (make sure the ip is correct)
# 		#
# 		# note that we point uploads to port '9970', do this when you want to
# 		# run in a configuration where you have two siad instances, one for
# 		# downloads and one for uploads. This drastically improves the up - and
# 		# download speed of your portal. When running your portal in this double
# 		# siad setup, make sure only the download portal runs in 'portal mode'.
# 		# The upload siad can be run in normal mode. Set the port to '9980' if
# 		# you do not want to run your portal in the double siad setup.
# 		proxy_pass http://docker-host:9970/skynet/skyfile/$dir1/$dir2/$dir3/$dir4;

# 		proxy_set_header Expect $http_expect;
# 		add_header Access-Control-Allow-Origin *;
# 		proxy_hide_header Access-Control-Allow-Origin;
# 		# make sure to override user agent header - siad requirement
# 		proxy_set_header User-Agent: Sia-Agent; 
# 		rewrite_by_lua_block {
# 			local b64 = require("ngx.base64")
# 			# local apipassword_file = io.open("/tmp/apipassword", "r")
# 			# local apipassword = apipassword_file:read("*all")
# 			# apipassword_file.close()
# 			local apipassword = ""
# 			local content = b64.encode_base64url(":" .. apipassword)
# 			ngx.req.set_header("Authorization", "Basic " .. content)
# 		}
# 	}

# 	location ~ "^/([a-zA-Z0-9-_]{46}(/.*)?)$" {
# 		limit_conn downloads_by_ip 10; # ddos protection: max 10 downloads at a time

# 		# we need to explicitly use set directive here because $1 will contain the skylink with
# 		# decoded whitespaces and set will re-encode it for us before passing it to proxy_pass
# 		set $skylink $1;

# 		proxy_read_timeout 600;
# 		# proxy this call to siad /skynet/skylink/ endpoint (make sure the ip is correct)
# 		proxy_pass http://docker-host:9980/skynet/skylink/$skylink$is_args$args;
# 		proxy_set_header Access-Control-Allow-Origin: *;
# 		# make sure to override user agent header - siad requirement
# 		proxy_set_header User-Agent: Sia-Agent;
		
# 		# make sure the Skynet-File-Metadata header gets exposed in the response
# 		add_header Access-Control-Expose-Headers skynet-file-metadata;

# 		# if you are expecting large headers (ie. Skynet-Skyfile-Metadata), tune these values to your needs
# 		#proxy_buffer_size 128k;
# 		#proxy_buffers 4 128k;

# 		# cache frequent (> 10) downloads for 24 hours
# 		proxy_cache skynet;
# 		proxy_cache_key $uri;
# 		proxy_cache_min_uses 10;
# 		proxy_cache_valid 200 1440m;
# 	}

# 	location ~ "^/file/([a-zA-Z0-9-_]{46}(/.*)?)$" {
# 		limit_conn downloads_by_ip 10; # ddos protection: max 10 downloads at a time

# 		# we need to explicitly use set directive here because $1 will contain the skylink with
# 		# decoded whitespaces and set will re-encode it for us before passing it to proxy_pass
# 		set $skylink $1;

# 		proxy_read_timeout 600;
# 		# proxy this call to siad /skynet/skylink/ endpoint (make sure the ip is correct)
# 		# this alias also adds attachment=true url param to force download the file
# 		proxy_pass http://docker-host:9980/skynet/skylink/$skylink?attachment=true&$args;
# 		proxy_set_header Access-Control-Allow-Origin: *;
# 		# make sure to override user agent header - siad requirement
# 		proxy_set_header User-Agent: Sia-Agent;

# 		# make sure the Skynet-File-Metadata header gets exposed in the response
# 		add_header Access-Control-Expose-Headers skynet-file-metadata;

# 		# if you are expecting large headers (ie. Skynet-Skyfile-Metadata), tune these values to your needs
# 		#proxy_buffer_size 128k;
# 		#proxy_buffers 4 128k;
		
# 		# cache frequent (> 10) downloads for 24 hours
# 		proxy_cache skynet;
# 		proxy_cache_key $uri;
# 		proxy_cache_min_uses 10;
# 		proxy_cache_valid 200 1440m;
# 	}

#     # Dynamic handler for issuing or returning certs for SNI domains.
#     ssl_certificate_by_lua_block {
#       auto_ssl:ssl_certificate()
#     }

#     # You must still define a static ssl_certificate file for nginx to start.
#     #
#     # You may generate a self-signed fallback with:
#     #
#     # openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 \
#     #   -subj '/CN=sni-support-required-for-valid-ssl' \
#     #   -keyout /etc/ssl/resty-auto-ssl-fallback.key \
#     #   -out /etc/ssl/resty-auto-ssl-fallback.crt
#     ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
#     ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;

#     # ssl settings
#     ssl_session_timeout 1d;
#     ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
#     ssl_session_tickets off;

#     # intermediate configuration
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;

#     # HSTS (ngx_http_headers_module is required) (63072000 seconds)
#     add_header Strict-Transport-Security "max-age=63072000" always;

# 	# PRO TIP: test ssl with https://www.ssllabs.com/ssltest/analyze.html
# }